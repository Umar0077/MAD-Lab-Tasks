import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Modal,
  FlatList,
  Alert,
  ScrollView,
} from "react-native";

export default function DiscountCalculator() {
  const [originalPrice, setOriginalPrice] = useState("");
  const [discountPercent, setDiscountPercent] = useState("");
  const [youSave, setYouSave] = useState(0);
  const [finalPrice, setFinalPrice] = useState(0);
  const [history, setHistory] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);

  const validateAndCalculate = (orig, disc) => {
    let op = parseFloat(orig);
    let dp = parseFloat(disc);

    if (isNaN(op) || op <= 0) {
      setYouSave(0);
      setFinalPrice(0);
      return;
    }
    if (isNaN(dp) || dp < 0 || dp > 100) {
      setYouSave(0);
      setFinalPrice(0);
      return;
    }

    const saveAmount = +(op * (dp / 100)).toFixed(2);
    const final = +(op - saveAmount).toFixed(2);

    setYouSave(saveAmount);
    setFinalPrice(final);
  };

  const onOriginalPriceChange = (text) => {
    // Allow only numbers and decimal
    if (/^\d*\.?\d{0,2}$/.test(text) || text === "") {
      setOriginalPrice(text);
      validateAndCalculate(text, discountPercent);
    }
  };

  const onDiscountPercentChange = (text) => {
    // Allow only numbers and decimal up to 2 digits, max 100
    if (/^\d*\.?\d{0,2}$/.test(text) || text === "") {
      if (parseFloat(text) <= 100 || text === "") {
        setDiscountPercent(text);
        validateAndCalculate(originalPrice, text);
      }
    }
  };

  const onSave = () => {
    if (!originalPrice || !discountPercent) {
      Alert.alert("Error", "Please enter both Original Price and Discount Percentage");
      return;
    }
    if (parseFloat(originalPrice) <= 0) {
      Alert.alert("Error", "Original Price must be positive");
      return;
    }
    if (parseFloat(discountPercent) < 0 || parseFloat(discountPercent) > 100) {
      Alert.alert("Error", "Discount Percentage must be between 0 and 100");
      return;
    }
    const newEntry = {
      id: Date.now().toString(),
      originalPrice: parseFloat(originalPrice).toFixed(2),
      discountPercent: parseFloat(discountPercent).toFixed(2),
      youSave: youSave.toFixed(2),
      finalPrice: finalPrice.toFixed(2),
    };
    setHistory((prev) => [newEntry, ...prev]);
    Alert.alert("Saved", "Calculation saved to history!");
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Discount Calculator</Text>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>Original Price:</Text>
        <TextInput
          style={styles.input}
          value={originalPrice}
          onChangeText={onOriginalPriceChange}
          keyboardType="numeric"
          placeholder="Enter original price"
        />
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>Discount Percentage:</Text>
        <TextInput
          style={styles.input}
          value={discountPercent}
          onChangeText={onDiscountPercentChange}
          keyboardType="numeric"
          placeholder="Enter discount percentage"
        />
      </View>

      <View style={styles.resultGroup}>
        <Text style={styles.resultText}>You Save: {youSave.toFixed(2)}</Text>
        <Text style={styles.resultText}>Final Price: {finalPrice.toFixed(2)}</Text>
      </View>

      <TouchableOpacity style={styles.saveButton} onPress={onSave}>
        <Text style={styles.saveButtonText}>Save</Text>
      </TouchableOpacity>

      <TouchableOpacity
        style={styles.viewHistoryButton}
        onPress={() => setModalVisible(true)}
      >
        <Text style={styles.viewHistoryButtonText}>View History</Text>
      </TouchableOpacity>

      <Modal visible={modalVisible} animationType="slide">
        <View style={styles.modalContainer}>
          <Text style={styles.modalHeader}>History</Text>
          <FlatList
            data={history}
            keyExtractor={(item) => item.id}
            ListEmptyComponent={
              <Text style={{ textAlign: "center", marginTop: 20 }}>
                No history available
              </Text>
            }
            renderItem={({ item }) => (
              <View style={styles.historyItem}>
                <Text style={styles.historyText}>
                  Original Price: {item.originalPrice} {"  "}
                  Discount: {item.discountPercent}% {"  "}
                  Final Price: {item.finalPrice}
                </Text>
              </View>
            )}
          />
          <TouchableOpacity
            style={styles.closeButton}
            onPress={() => setModalVisible(false)}
          >
            <Text style={styles.closeButtonText}>Close</Text>
          </TouchableOpacity>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#f5f8fa",
  },
  header: {
    fontSize: 26,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
    color: "#2c3e50",
  },
  inputGroup: {
    marginBottom: 15,
  },
  label: {
    fontWeight: "600",
    marginBottom: 6,
    color: "#34495e",
  },
  input: {
    borderWidth: 1,
    borderColor: "#bdc3c7",
    borderRadius: 5,
    padding: 12,
    fontSize: 18,
    backgroundColor: "white",
  },
  resultGroup: {
    marginVertical: 20,
    alignItems: "center",
  },
  resultText: {
    fontSize: 22,
    fontWeight: "bold",
    color: "#27ae60",
    marginVertical: 5,
  },
  saveButton: {
    backgroundColor: "#2980b9",
    padding: 15,
    borderRadius: 6,
    marginBottom: 15,
  },
  saveButtonText: {
    color: "white",
    fontSize: 20,
    fontWeight: "600",
    textAlign: "center",
  },
  viewHistoryButton: {
    backgroundColor: "#7f8c8d",
    padding: 15,
    borderRadius: 6,
  },
  viewHistoryButtonText: {
    color: "white",
    fontSize: 20,
    fontWeight: "600",
    textAlign: "center",
  },
  modalContainer: {
    flex: 1,
    backgroundColor: "#ecf0f1",
    padding: 20,
  },
  modalHeader: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 15,
    color: "#34495e",
    textAlign: "center",
  },
  historyItem: {
    backgroundColor: "#2ecc71",
    padding: 15,
    borderRadius: 8,
    marginVertical: 8,
  },
  historyText: {
    fontSize: 18,
    color: "white",
  },
  closeButton: {
    backgroundColor: "#c0392b",
    padding: 15,
    borderRadius: 6,
    marginTop: 20,
  },
  closeButtonText: {
    color: "white",
    fontSize: 20,
    fontWeight: "600",
    textAlign: "center",
  },
});
